{"version":3,"sources":["Todolist/Todoing.js","Todolist/Todoinput.js","Todolist/Todolist.js","index.js"],"names":["Todoing","todo","this","props","map","item","idx","key","onClick","del","Component","defaultProps","Todoinput","handleInput","e","keyCode","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","refs","focus","ref","onKeyDown","type","onChange","inp","Todolist","addItem","data","delItem","splice","ReactDOM","render","document","getElementById"],"mappings":"6PAGqBA,E,iLAIP,IAAD,OACAC,EAAQC,KAAKC,MAAbF,KACL,OACI,4BAEQA,EAAKG,KAAI,SAACC,EAAKC,GAAN,OACL,wBAAIC,IAAKD,GACJD,EADL,MACa,4BAAQG,QAAS,kBAAI,EAAKL,MAAMM,IAAIH,KAApC,yB,GAXAI,aAwBrCV,EAAQW,aAAe,CACnBV,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,I,mBCvBGW,E,YACjB,aAAc,IAAD,8BACT,+CAQJC,YAAc,SAACC,GAEM,KAAdA,EAAEC,SACD,EAAKZ,MAAMa,IAAIF,EAAEG,OAAOC,QAZnB,EAebC,aAAe,SAACL,GACZ,EAAKM,SAAL,eACKN,EAAEG,OAAOI,KAAOC,SAA0B,KAAjBR,EAAEG,OAAOC,MAAW,EAAEJ,EAAEG,OAAOC,UAf7D,EAAKL,YAAc,EAAKA,YAAYU,KAAjB,gBACnB,EAAKC,MAAQ,CACTC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAqBTC,QAAQC,IAAI3B,KAAK4B,KAAKL,GACtBvB,KAAK4B,KAAKL,EAAEM,U,+BAEN,IAAD,OACL,OACI,6BACI,2BAAOC,IAAI,IAAIC,UAAW/B,KAAKW,YAAaqB,KAAK,SADrD,IAGI,2BAAOb,KAAK,IAAIc,SAAUjC,KAAKiB,aAAcD,MAAOhB,KAAKsB,MAAME,EAAGO,UAAW/B,KAAKW,YAAaqB,KAAK,SAHxG,IAKI,2BAAOb,KAAK,IAAIc,SAAUjC,KAAKiB,aAAcD,MAAOhB,KAAKsB,MAAMG,EAAGM,UAAW/B,KAAKW,YAAaqB,KAAK,SALxG,IAOI,2BAAIhC,KAAKsB,MAAMC,EAAEvB,KAAKsB,MAAME,EAAExB,KAAKsB,MAAMG,GAEzC,2BAAOK,IAAK,SAACI,GAAO,EAAKA,IAAIA,GAAMF,KAAK,SACxC,4BAAQ1B,QAAS,WAAKoB,QAAQC,IAAI,EAAKO,IAAIlB,SAA3C,qB,GArCuBR,aCDlB2B,E,YACjB,aAAc,IAAD,8BACT,+CAsBJC,QAAU,SAACC,GACP,EAAKnB,SAAS,CACVnB,KAAK,GAAD,mBAAK,EAAKuB,MAAMvB,MAAhB,CAAqBsC,OAzBpB,EA6BbC,QAAU,SAAClC,EAAIQ,GAEX,IAAIb,EAAI,YAAO,EAAKuB,MAAMvB,MAC1BA,EAAKwC,OAAOnC,EAAI,GAEhB,EAAKc,UAAS,SAACI,EAAMrB,GAEjB,OADAyB,QAAQC,IAAIL,EAAMvB,MACX,CACHA,KAAMA,OAnCd,EAAKuB,MAAQ,CAETC,EAAE,IACFC,EAAE,KALG,E,sEAiDT,OACI,6BACI,kBAAC,EAAD,CAAWV,IAAKd,KAAKoC,UACrB,kBAAC,EAAD,CAAS7B,IAAKP,KAAKsC,QAASvC,KAAMC,KAAKsB,MAAMvB,Y,GArDvBS,aC0LtCgC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b32dc23f.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default class Todoing extends Component {\r\n    // delItem=(idx)=>{\r\n    //     this.props.del(idx);\r\n    // }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    todo.map((item,idx)=>\r\n                        <li key={idx}>\r\n                            {item}---<button onClick={()=>this.props.del(idx)}>删除</button>\r\n                            {/* {item}---<button onClick={this.delItem.bind(idx)}>删除</button> */}\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes = {\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\nTodoing.defaultProps = {//设置默认值\r\n    todo:[1,2,3,4,5]\r\n}","  \r\nimport React, { Component } from 'react'\r\n// 受控组件：value值被react控制的表单元素\r\n// 可以实时获取表单元素的值（表单验证）/写法相对麻烦\r\n// \r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        // 绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this.refs.a);\r\n        this.refs.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref='a' onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/* 非受控组件:一次性获取或处理表单元素的值 */}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// 受控组件：\r\n// 1、给input标签添加value属性，赋值为state的值\r\n// 2、给input标签绑定onChange事件，\r\n// 在事件处理函数中setState\r\n// 3、一个事件处理函数控制多个表单元素时，\r\n// 给input标签加上name属性,事件处理函数中写：\r\n// setState({[e.target.name]:e.target.value})","import React, { Component } from 'react'\r\nimport Todoing from './Todoing'\r\nimport Todoinput from './Todoinput'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            //todo:[1,2,3],\r\n            a:100,\r\n            b:200\r\n        }\r\n        // 深拷贝\\浅拷贝\r\n        // var obj = {a:100,b:[1,2,3]};\r\n        // var obj1 = {c:300};\r\n        // var o = {...obj};\r\n        // var o = Object.assign({},obj,obj1);\r\n        // 深拷贝\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.b[0] = 200;\r\n        // console.log(o===obj);\r\n        // 遍历对象\r\n        // Object.keys(obj).forEach((item)=>{\r\n        //     console.log(item)\r\n        //     console.log(obj[item])\r\n        // })\r\n\r\n    }\r\n    addItem = (data)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n\r\n    }\r\n    delItem = (idx,e)=>{\r\n        // 1、不能直接改变或处理state，通过setState改变\r\n        let todo = [...this.state.todo];\r\n        todo.splice(idx,1);\r\n        // 2、setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return {\r\n                todo: todo\r\n            }\r\n        })\r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n        // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n        //     todo: this.state.num + 100\r\n        // },()=>{\r\n        //     console.log(this.state.todo)\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Fragment} from 'react';\nimport ReactDOM from 'react-dom';\n//import ShowTime from './ShowTime';\nimport \"./index.css\";\nimport Todolist from './Todolist/Todolist';\n\n//react编译\n//jsx语法\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n//bable编译\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n\n//自己封装的render函数\n/*\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    //文档碎片\n    var fragment = document.createDocumentFragment();\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(ele);\n}\n// render(obj,document.getElementById('root'));\n*/\n/*\n//页面渲染过程\n//请求HTML页面，浏览器HTML解析器解析html文件\n//link引入CSS文件、CSS解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree生成一个render tree\n\n//页面回流（重排reflow）DOM结构变化，内容变化，大小位置、显示的变化\n//页面重绘（repaint） 颜色变化（背景色，字体颜色，边框颜色）\n\n///1、先用变量进行dom处理，最后一次渲染\nconsole.time(\"time\");\nvar div = document.getElementById(\"root\");\nvar str = \"\";\nfor(var i = 0;i < 1000;i++){\n    str += '<p>' + i + '</p>';\n}\ndiv.innerHTML = str;\nconsole.timeEnd(\"time\");\n\n//2、对于样式处理\nvar dir = document.getElementById(\"root\");\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\ndiv.className = 'active';\n\n//3、offsetLeft、offsetWidth等都会引起回流\nconsole.log(div.offsetLeft);\nsetInterval(()=>{\n    div.style.width = div.offsetWidth + 1 +'px';\n},100)\n\n// 4、文档碎片（内存中的一个变量）\n*/\n\n//显示当前系统时间\n/*\nfunction showTime(){\n    var ele = <div>{new Date().toLocaleString()}</div>;\n    ReactDOM.render(\n        ele,\n        document.querySelector('#root')\n    );\n}\nshowTime();\nsetInterval(showTime,1000);\n*/\n/*\nvar num = 100;\nfunction ShowTime(props){\n    console.log(props);\n    //return <div>{props.name}{new Date().toLocaleString()}</div>\n    return (<Fragment>\n        <div>{props.name}{props.age}</div>\n        <div>\n            {new Date().toLocaleString()}\n        </div>\n        </Fragment>)\n}\nReactDOM.render(\n    <ShowTime age={num} name=\"zhangsan\"/>,\n    document.getElementById('root')\n);\n*/\n\n/*\nclass ShowTime extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            time: new Date().toLocaleString(),\n            a:100,\n            b:200\n        }\n        setInterval(()=>{\n            this.setState({\n                time: new Date().toLocaleString()\n            })\n        },1000)\n    }\n    render(){\n        var {name,age} = this.props;\n        return(\n            <Fragment>\n                  条件渲染  \n                {name.length>5?<div>姓名：{name}</div>:''}\n                {name.length>5&&<div>姓名：{name}</div>}\n                <div>{this.state.time}</div>\n                <div>姓名：{name}</div>\n                <div>年龄：{age}</div>\n                循环渲染 \n                <div>\n                    {\n                        age.map((item,index)=>{\n                            if(index%2 === 0){\n                                return <p key={index}>{item}</p>\n                            }\n                            return;\n                        })\n                    }\n                </div>\n            </Fragment>\n        )\n    }\n}\n*/\n\n// var num =[1,2,3,4,5];\n\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// );\n\n\n\n//组件交互\n//父组件----->子组件：调用子组件时添加属性，子组件通过props拿到传递的属性\n//子组件----->父组件：\nReactDOM.render(\n    <Todolist/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}